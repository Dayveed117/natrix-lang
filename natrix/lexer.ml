# 4 "lexer.mll"
 
  open Lexing
  open Ast
  open Parser

  exception Lexing_error of string

  let id_or_kwd =
    let h = Hashtbl.create 32 in
    List.iter (fun (s, tok) -> Hashtbl.add h s tok)
      ["var", VAR;
       "type", TYPE;
       "int", INT;
       "if", IF;
       "else", ELSE;
       "print", PRINT;
       "foreach", FOREACH;
       "in", IN;
       "do", DO;
       "filled", FILLED;
       "by", BY;
       "of", OF;
       "true", CST (Cbool true);
       "false", CST (Cbool false);];
   fun s -> try Hashtbl.find h s with Not_found -> ID s

   let string_buffer = Buffer.create 1024


# 32 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\229\255\230\255\078\000\232\255\233\255\234\255\235\255\
    \236\255\237\255\002\000\003\000\012\000\001\000\031\000\245\255\
    \048\000\034\000\248\255\250\255\251\255\252\255\089\000\049\000\
    \203\000\255\255\100\000\138\000\170\000\247\255\246\255\244\255\
    \243\255\242\255\240\255\238\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\024\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\016\000\014\000\026\000\026\000\026\000\255\255\
    \026\000\026\000\255\255\255\255\255\255\255\255\002\000\006\000\
    \001\000\255\255\255\255\001\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\255\255\027\000\027\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\025\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\014\000\000\000\000\000\000\000\000\000\013\000\032\000\
    \009\000\008\000\019\000\021\000\000\000\020\000\016\000\023\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\017\000\015\000\011\000\018\000\010\000\035\000\
    \034\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\007\000\031\000\006\000\030\000\029\000\
    \027\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\005\000\012\000\004\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \033\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\027\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\255\255\000\000\000\000\000\000\
    \022\000\028\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\024\000\000\000\000\000\000\000\
    \000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\013\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\014\000\000\000\016\000\017\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \012\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\026\000\027\000\255\255\255\255\255\255\
    \255\255\255\255\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\028\000\255\255\255\255\255\255\
    \022\000\027\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\024\000\255\255\255\255\255\255\
    \255\255\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\024\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\024\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\027\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\028\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec next_tokens lexbuf =
    __ocaml_lex_next_tokens_rec lexbuf 0
and __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 44 "lexer.mll"
            ( new_line lexbuf; next_tokens lexbuf )
# 191 "lexer.ml"

  | 1 ->
# 46 "lexer.mll"
            ( next_tokens lexbuf )
# 196 "lexer.ml"

  | 2 ->
let
# 47 "lexer.mll"
             id
# 202 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 47 "lexer.mll"
                ( [id_or_kwd id] )
# 206 "lexer.ml"

  | 3 ->
# 48 "lexer.mll"
            ( [PLUS] )
# 211 "lexer.ml"

  | 4 ->
# 49 "lexer.mll"
            ( [MINUS] )
# 216 "lexer.ml"

  | 5 ->
# 50 "lexer.mll"
            ( [TIMES] )
# 221 "lexer.ml"

  | 6 ->
# 51 "lexer.mll"
            ( [DIV] )
# 226 "lexer.ml"

  | 7 ->
# 52 "lexer.mll"
            ( [EQUALS] )
# 231 "lexer.ml"

  | 8 ->
# 53 "lexer.mll"
            ( [COLONEQ] )
# 236 "lexer.ml"

  | 9 ->
# 54 "lexer.mll"
            ( [DDOT] )
# 241 "lexer.ml"

  | 10 ->
# 55 "lexer.mll"
            ( [SEMICOLON] )
# 246 "lexer.ml"

  | 11 ->
# 56 "lexer.mll"
            ( [CMP Bneq] )
# 251 "lexer.ml"

  | 12 ->
# 57 "lexer.mll"
            ( [CMP Band] )
# 256 "lexer.ml"

  | 13 ->
# 58 "lexer.mll"
            ( [CMP Bor] )
# 261 "lexer.ml"

  | 14 ->
# 59 "lexer.mll"
            ( [CMP Blt] )
# 266 "lexer.ml"

  | 15 ->
# 60 "lexer.mll"
            ( [CMP Ble] )
# 271 "lexer.ml"

  | 16 ->
# 61 "lexer.mll"
            ( [CMP Bgt] )
# 276 "lexer.ml"

  | 17 ->
# 62 "lexer.mll"
            ( [CMP Bge] )
# 281 "lexer.ml"

  | 18 ->
# 63 "lexer.mll"
            ( [LP] )
# 286 "lexer.ml"

  | 19 ->
# 64 "lexer.mll"
            ( [RP] )
# 291 "lexer.ml"

  | 20 ->
# 65 "lexer.mll"
            ( [LSB] )
# 296 "lexer.ml"

  | 21 ->
# 66 "lexer.mll"
            ( [RSB] )
# 301 "lexer.ml"

  | 22 ->
# 67 "lexer.mll"
            ( [LCB] )
# 306 "lexer.ml"

  | 23 ->
# 68 "lexer.mll"
            ( [RCB] )
# 311 "lexer.ml"

  | 24 ->
let
# 69 "lexer.mll"
               s
# 317 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "lexer.mll"
            ( try [CST (Cint (int_of_string s))]
              with _ -> raise (Lexing_error ("constant too large: " ^ s)) )
# 322 "lexer.ml"

  | 25 ->
# 72 "lexer.mll"
            ( [EOF] )
# 327 "lexer.ml"

  | 26 ->
let
# 73 "lexer.mll"
         c
# 333 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 73 "lexer.mll"
            ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 337 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state

;;

# 75 "lexer.mll"
 
  let next_token =
    let tokens = Queue.create () in (* próximos tokens por retornar *)
    fun lb ->
      if Queue.is_empty tokens then begin
        let l = next_tokens lb in
        List.iter (fun t -> Queue.add t tokens) l
      end;
      Queue.pop tokens

# 355 "lexer.ml"
